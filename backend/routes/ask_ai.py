from fastapi import APIRouter
from pydantic import BaseModel
import openai
import os
import geopandas as gpd

router = APIRouter()

UPLOAD_DIR = "uploaded_files"

class ChatRequest(BaseModel):
    question: str
    filename: str

@router.post("/ask_ai")
async def ask_ai(req: ChatRequest):
    """
    üí¨ Permet de poser une question personnalis√©e sur un fichier analys√©.
    L‚ÄôIA r√©pond en fonction du contenu du fichier et du contexte cadastral DGID.
    """
    openai.api_key = os.getenv("OPENAI_API_KEY")
    file_path = os.path.join(UPLOAD_DIR, req.filename)

    if not os.path.exists(file_path):
        return {"reponse": f"‚ö†Ô∏è Fichier non trouv√© : {req.filename}"}

    try:
        gdf = gpd.read_file(file_path)
        stats = {
            "Total": len(gdf),
            "Champs disponibles": list(gdf.columns),
            "Extrait NICAD": list(gdf["NICAD"].dropna().unique()[:5]) if "NICAD" in gdf.columns else "Non disponible",
        }

        # üî• PROMPT OPTIMIS√â
        prompt = f"""
Tu es un assistant cadastral intelligent, expert SIG au S√©n√©gal, form√© aux normes de la DGID, au processus QGIS et au traitement des fichiers DAO (DXF, DGN) et SIG (SHP, GeoJSON, GPKG).

Un agent DGID t‚Äôa soumis une question relative √† un fichier g√©ographique contenant {stats["Total"]} entit√©s.

Voici des informations utiles sur le fichier :
- Champs disponibles : {', '.join(stats['Champs disponibles'])}
- √âchantillon NICAD : {stats['Extrait NICAD']}

Ta mission :
1. Comprendre pr√©cis√©ment la question suivante :  
   üëâ ¬´ {req.question} ¬ª

2. Y r√©pondre de fa√ßon claire, concise et imm√©diatement exploitable par un agent DGID ou un g√©om√®tre en :
   - mission terrain
   - traitement bureau (SIG ou DAO)
   - contr√¥le qualit√© ou r√©gularisation

3. Adapte ta r√©ponse au contexte cadastral s√©n√©galais :
   - Explique s‚Äôil y a lieu de v√©rifier une topologie, une attribution NICAD, une erreur de calque, une incoh√©rence attributaire
   - Propose des outils (QGIS, GDAL, AutoCAD, terrain) ou commandes utiles si besoin
   - Utilise un langage simple mais professionnel

Ne fais pas de r√©sum√© g√©n√©ral : concentre-toi uniquement sur la **question pos√©e**, dans **le contexte du fichier analys√©**. Tu es l√† pour assister de fa√ßon intelligente et pragmatique.
"""

        response = openai.ChatCompletion.create(
            model="gpt-4",
            messages=[
                {"role": "system", "content": "Tu es un assistant cadastral DGID s√©n√©galais expert en SIG."},
                {"role": "user", "content": prompt}
            ],
            temperature=0.5,
        )
        return {"reponse": response.choices[0].message["content"]}

    except Exception as e:
        return {"reponse": f"‚ö†Ô∏è Erreur IA : {str(e)}"}
